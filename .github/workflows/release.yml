name: Build & Release

on:
  push:
    tags:
      - "v*.*.*" # e.g., v1.0.0

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  build-and-upload:
    needs: create_release
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build Electron App
        run: |
          echo "Building Electron app with BUILD_TARGET=electron"
          echo "API URL: $VITE_API_URL"
          npm run dist
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NODE_ENV: production
          BUILD_TARGET: electron
          VITE_API_URL: https://hr-api-3005.go9.me

      - name: List build artifacts
        run: |
          echo "Build artifacts:"
          ls -la dist/
          if [ -d "dist/win-unpacked" ]; then
            echo "Windows unpacked contents:"
            ls -la dist/win-unpacked/
          fi

      - name: Upload Windows Assets
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./dist/MyChatApp Setup ${{ github.ref_name }}.exe
          asset_name: MyChatApp-Setup-${{ github.ref_name }}-Windows.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows Portable
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./dist/MyChatApp ${{ github.ref_name }}.exe
          asset_name: MyChatApp-${{ github.ref_name }}-Windows-Portable.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS Assets
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./dist/MyChatApp-${{ github.ref_name }}.dmg
          asset_name: MyChatApp-${{ github.ref_name }}-macOS.dmg
          asset_content_type: application/octet-stream
